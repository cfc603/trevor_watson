"""
Django settings for trevor_watson project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

from json import loads
from unipath import Path

from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).ancestor(2)
PROJECT_DIR = BASE_DIR.parent


# get secrets from json file
with open(Path(PROJECT_DIR.parent + '/secrets/secrets.json')) as f:
    secrets = loads(f.read())

def get_secrets(setting, secrets=secrets):
    """Get setting variable or return exception"""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = 'Set the {0} enviroment variable'.format(setting)
        raise ImproperlyConfigured


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secrets("SECRET_KEY")


# Application definition

INSTALLED_APPS = [
    # django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # local
    'about',
    'blog',
    'contact',
    'form_marketing',
    'home',
    'it_assist',

    # third party
    'bootstrapform',
    'dj_tasks',
    'rest_framework',
    'rest_framework.authtoken',

    # wagtail
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail.core',

    'modelcluster',
    'taggit',
    'wagtailcodeblock',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'form_marketing.middleware.ViewTrackingMiddleware',
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
]

ROOT_URLCONF = 'trevor_watson.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [Path(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'trevor_watson.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': Path(PROJECT_DIR.parent, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
MEDIA_ROOT = Path(PROJECT_DIR.parent, 'media')
MEDIA_URL = '/media/'

STATICFILES_DIRS = [
    Path(BASE_DIR, 'static'),
]
STATIC_ROOT = Path(PROJECT_DIR.parent + '/static')
STATIC_URL = '/static/'


# Email settings
ADMINS = [("Trevor", "wtrevor162@gmail.com"),]
EMAIL_HOST = 'smtp.mailgun.com'
EMAIL_HOST_USER = get_secrets('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_secrets('EMAIL_HOST_PASSWORD')
EMAIL_PORT = '587'
EMAIL_SUBJECT_PREFIX = "[TrevorWatson.info] "
EMAIL_USE_TLS = True
MANAGERS = [] + ADMINS
SERVER_EMAIL = get_secrets('SERVER_EMAIL')


# dj-tasks
DJTASKS_TASKS = [
    "contact.tasks.ContactEntryTask",
    "form_marketing.tasks.BusinessViewNotify",
]
DJTASKS_LOCK_ID = "trevor_watson"
DJTASKS_SLEEP_INTERVAL = 60 * 2 # 2 minutes


# drf
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}


# wagtail
WAGTAIL_SITE_NAME = "Trevor Watson"


# wagtailcodeblock
WAGTAIL_CODE_BLOCK_LANGUAGES = (
    ('bash', 'Bash + Shell'),
    ('css', 'CSS'),
    ('css-extras', 'CSS Extras'),
    ('django', 'Django/Jinja2'),
    ('git', 'Git'),
    ('html', 'HTML'),
    ('javascript', 'JavaScript'),
    ('json', 'JSON'),
    ('less', 'Less'),
    ('markdown', 'Markdown'),
    ('python', 'Python'),
    ('regex', 'Regex'),
    ('sass', 'Sass (Sass)'),
    ('sql', 'SQL'),
    ('yaml', 'YAML'),
)
